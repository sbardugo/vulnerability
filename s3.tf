data "aws_caller_identity" "current" {}

resource "aws_s3_bucket" "shiran-logs-bucket" {
  bucket = "shiran-logs-bucket"
}

resource "aws_s3_bucket" "shiran-bucket" {
  for_each = toset(var.bucket)
  bucket   = each.value
}


resource "aws_s3_bucket" "shiran-bucketnotresource" {
  for_each = toset(var.bucketnotresource)
  bucket   = each.value
}

resource "aws_s3_bucket" "shiran-bucketnotprincipel" {
  for_each = toset(var.bucketnotprincipel)
  bucket   = each.value
}
resource "aws_s3_bucket_policy" "shiran-bucket-bucketnotprincipel" {
  for_each = toset(var.bucketnotprincipel)
  bucket   = aws_s3_bucket.shiran-bucketnotprincipel[each.key].id
  policy = jsonencode({
    Version = "2012-10-17"
    Id      = "BUCKETPOLICY"
    Statement = [
      {
        Sid          = "IPAllow"
        Effect       = "Allow"
        NotPrincipal = { "AWS" : ["arn:aws:iam::151193119194:role/assume-role-corplex"] }
        Action       = "s3:*"
        Resource     = aws_s3_bucket.shiran-bucketnotprincipel[each.key].arn
        Condition = {
          IpAddress = {
            "aws:SourceIp" = "10.1.0.0/16"
          }
        }
      },
    ]
  })
}

resource "aws_s3_bucket_policy" "shiran-bucket-policy" {
  for_each = toset(var.bucket)
  bucket   = aws_s3_bucket.shiran-bucket[each.key].id

  # Terraform's "jsonencode" function converts a
  # Terraform expression's result to valid JSON syntax.
  policy = jsonencode({
    Version = "2012-10-17"
    Id      = "BUCKETPOLICY"
    Statement = [
      {
        Sid       = "IPAllow"
        Effect    = "Deny"
        Principal = "*"
        Action    = "s3:*"
        Resource = [
          aws_s3_bucket.shiran-bucket[each.key].arn,
          "${aws_s3_bucket.shiran-bucket[each.key].arn}/*",
        ]
        Condition = {
          IpAddress = {
            "aws:SourceIp" = "10.1.0.0/16"
          }
        }
      },
    ]
  })
}

resource "aws_s3_bucket" "shiran-glacier-bucket" {
  bucket = "shiran-glacier-bucket-${var.environment}"

  tags = {
    Name = "shiran-glacier-bucket-${var.environment}"
  }
}

resource "aws_s3_bucket" "shiran-default-encrypted-bucket" {
  bucket = "shiran-default-encrypted-bucket-${var.environment}"
  tags = {
    Name = "shiran-default-encrypted-bucket-${var.environment}"
  }
}

resource "aws_s3_bucket" "shiran-key-encrypted-bucket" {
  bucket = "shiran-key-encrypted-bucket-${var.environment}"

  tags = {
    Name = "shiran-key-encrypted-bucket-${var.environment}"
  }
}

resource "aws_s3_bucket" "shiran-key-no-access-bucket" {
  bucket = "shiran-key-no-access-bucket-${var.environment}"

  tags = {
    Name = "shiran-key-no-access-bucket-${var.environment}"
  }
}

resource "aws_s3_bucket" "shiran-no-access-bucket" {
  bucket = "shiran-no-access-bucket-${var.environment}"

  tags = {
    Name = "shiran-no-access-bucket-${var.environment}"
  }
}

//Deny policy for bucket
resource "aws_s3_bucket_policy" "shiran-no-access-bucket-policy" {
  bucket = aws_s3_bucket.shiran-no-access-bucket.id

  policy = jsonencode({
    Version = "2012-10-17"
    Id      = "BUCKETPOLICY"
    Statement = [
      {
        Sid       = "DenyAllObjActions"
        Effect    = "Allow"
        Principal = "*"
        Action = [
          "s3:Get*",
          "s3:List*"
        ]
        Resource = [
          "${aws_s3_bucket.shiran-no-access-bucket.arn}",
          "${aws_s3_bucket.shiran-no-access-bucket.arn}/*"
        ],
        Condition = {
          StringNotLike = {
            "aws:username" = "arn:aws:iam::${data.aws_caller_identity.current.account_id}:role/shiran-role-dev"
          }
        }
      }
    ]
  })
}

//Block all buckets to public access
resource "aws_s3_bucket_public_access_block" "s3NotPublic" {
  bucket                  = "NameOfBucket"
  block_public_acls       = true
  block_public_policy     = true
  restrict_public_buckets = true
}

locals {
  corplex-buckets = [
    aws_s3_bucket.shiran-no-access-bucket.id,
    aws_s3_bucket.shiran-key-no-access-bucket.id,
    aws_s3_bucket.shiran-key-encrypted-bucket.id,
    aws_s3_bucket.shiran-default-encrypted-bucket.id,
    aws_s3_bucket.shiran-glacier-bucket.id,
    aws_s3_bucket.shiran-logs-bucket.id
  ]
}
resource "aws_s3_bucket_acl" "shiran-logs-bucket" {
  bucket = aws_s3_bucket.shiran-logs-bucket.id
  acl    = "log-delivery-write"
}

resource "aws_s3_bucket_logging" "shiran-bucket" {
  for_each = toset(var.bucket)
  bucket   = aws_s3_bucket.shiran-bucket[each.key].id

  target_bucket = aws_s3_bucket.shiran-logs-bucket.id
  target_prefix = "logs/${each.value}/"
}

resource "aws_s3_bucket_policy" "shiran-bucketnotresource" {
  for_each = toset(var.bucketnotresource)
  bucket   = aws_s3_bucket.shiran-bucketnotresource[each.key].id
  policy = jsonencode({
    Version = "2012-10-17"
    Id      = "BUCKETPOLICY"
    Statement = [
      {
        Sid       = "IPAllow"
        Effect    = "Deny"
        Principal = "*"
        Action    = "s3:*"
        NotResource = [
          "arn:aws:s3:::*"
        ]
        Condition = {
          IpAddress = {
            "aws:SourceIp" = "10.1.0.0/16"
          }
        }
      },
    ]
  })
}

resource "aws_s3_bucket_server_side_encryption_configuration" "shiran-bucketnotresource" {
  for_each = toset(var.bucketnotresource)
  bucket   = aws_s3_bucket.shiran-bucketnotresource[each.key].id

  rule {
    apply_server_side_encryption_by_default {
      sse_algorithm = "aws:kms"
    }
  }
}

resource "aws_s3_bucket_server_side_encryption_configuration" "shiran-bucketnotprincipel" {
  for_each = toset(var.bucketnotprincipel)
  bucket   = aws_s3_bucket.shiran-bucketnotprincipel[each.key].id

  rule {
    apply_server_side_encryption_by_default {
      sse_algorithm = "aws:kms"
    }
  }
}

resource "aws_s3_bucket_lifecycle_configuration" "shiran-glacier-bucket" {
  bucket = aws_s3_bucket.shiran-glacier-bucket.id

  rule {
    id = "permanent_retention"

    transition {
      days          = 1
      storage_class = "GLACIER"
    }
    status = "Enabled"

    filter {
      prefix = "permanent/"
    }
  }
}

resource "aws_s3_bucket_server_side_encryption_configuration" "shiran-glacier-bucket" {
  bucket = aws_s3_bucket.shiran-glacier-bucket.id

  rule {
    apply_server_side_encryption_by_default {
      sse_algorithm = "aws:kms"
    }
  }
}

resource "aws_s3_bucket_server_side_encryption_configuration" "shiran-default-encrypted-bucket" {
  bucket = aws_s3_bucket.shiran-default-encrypted-bucket.id

  rule {
    apply_server_side_encryption_by_default {
      sse_algorithm = "AES256"
    }
  }
}

resource "aws_s3_bucket_server_side_encryption_configuration" "shiran-key-encrypted-bucket" {
  bucket = aws_s3_bucket.shiran-key-encrypted-bucket.id

  rule {
    apply_server_side_encryption_by_default {
      kms_master_key_id = var.kms_key
      sse_algorithm     = "aws:kms"
    }
  }
}

resource "aws_s3_bucket_server_side_encryption_configuration" "shiran-key-no-access-bucket" {
  bucket = aws_s3_bucket.shiran-key-no-access-bucket.id

  rule {
    apply_server_side_encryption_by_default {
      kms_master_key_id = var.restricted_s3_kms_key
      sse_algorithm     = "aws:kms"
    }
  }
}

resource "aws_s3_bucket_server_side_encryption_configuration" "shiran-no-access-bucket" {
  bucket = aws_s3_bucket.shiran-no-access-bucket.id

  rule {
    apply_server_side_encryption_by_default {
      sse_algorithm = "aws:kms"
    }
  }
}


resource "aws_s3_bucket" "shiran-corplex-lambdas" {
  bucket = "shiran-corplex-lambdas"
}