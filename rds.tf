resource "random_string" "password" {
  length      = 16
  min_numeric = 1
  min_lower   = 1
  min_upper   = 1
  special     = false
}

data "aws_availability_zones" "available" {
  all_availability_zones = true
  state                  = "available"
}

resource "aws_db_subnet_group" "rds-subnet-group" {
  name       = "subnet-group-${var.environment}"
  subnet_ids = var.private_subnets

  tags = {
    Name = "DB subnet group ${var.environment}"
  }
}

resource "aws_db_parameter_group" "logs_enabled_mysql_default" {
  name   = "rds-pg-mysql-${var.environment}"
  family = "mysql8.0"

  parameter {
    apply_method = "immediate"
    name         = "general_log"
    value        = "1"
  }
}

resource "aws_db_parameter_group" "logs_enabled_postgres_default" {
  name   = "rds-pg-postgres-${var.environment}"
  family = "postgres12"

  parameter {
    apply_method = "immediate"
    name         = "pgaudit.log"
    value        = "all"
  }
}

//Large RDS types
resource "aws_db_instance" "large_rds_mysql" {

  allocated_storage    = 200
  engine               = "mysql"
  engine_version       = "8.0.27"
  instance_class       = "db.t3.micro"
  db_subnet_group_name = aws_db_subnet_group.rds-subnet-group.id
  identifier           = "mysql-large-${var.environment}"
  name                 = var.environment
  username             = "foo"
  password             = random_string.password.result
  parameter_group_name = aws_db_parameter_group.logs_enabled_mysql_default.name
  skip_final_snapshot  = true
  apply_immediately    = true
}

resource "aws_db_instance" "large_rds_postgres" {
  allocated_storage    = 200
  engine               = "postgres"
  engine_version       = "12.7"
  instance_class       = "db.t3.micro"
  db_subnet_group_name = aws_db_subnet_group.rds-subnet-group.id
  identifier           = "postgres-large-${var.environment}"
  username             = "root"
  password             = random_string.password.result
  parameter_group_name = aws_db_parameter_group.logs_enabled_postgres_default.name
  depends_on           = [aws_db_parameter_group.logs_enabled_postgres_default]
  skip_final_snapshot  = true
  publicly_accessible  = false
  apply_immediately    = true
}

//Encrypted RDS types
resource "aws_db_instance" "encrypted_rds_mysql" {

  allocated_storage    = 10
  engine               = "mysql"
  engine_version       = "8.0.27"
  instance_class       = "db.t3.micro"
  storage_type         = "standard"
  db_subnet_group_name = aws_db_subnet_group.rds-subnet-group.id
  identifier           = "mysql-large-encrypted-${var.environment}"
  name                 = var.environment
  username             = "foo"
  password             = random_string.password.result
  parameter_group_name = aws_db_parameter_group.logs_enabled_mysql_default.name
  depends_on           = [aws_db_parameter_group.logs_enabled_mysql_default]
  skip_final_snapshot  = true
  storage_encrypted    = true
  publicly_accessible  = true
  apply_immediately    = true

}

resource "aws_db_instance" "kms_rds_mysql" {

  allocated_storage    = 10
  engine               = "mysql"
  engine_version       = "8.0.27"
  instance_class       = "db.t3.micro"
  storage_type         = "standard"
  db_subnet_group_name = aws_db_subnet_group.rds-subnet-group.id
  identifier           = "mysql-large-kms-${var.environment}"
  name                 = var.environment
  username             = "foo"
  password             = random_string.password.result
  parameter_group_name = aws_db_parameter_group.logs_enabled_mysql_default.name
  skip_final_snapshot  = true
  storage_encrypted    = true
  kms_key_id           = var.kms_key
  publicly_accessible  = false
  apply_immediately    = true

}

resource "aws_db_instance" "restricted_kms_rds_mysql" {

  allocated_storage    = 10
  engine               = "mysql"
  engine_version       = "8.0.27"
  instance_class       = "db.t3.micro"
  storage_type         = "standard"
  db_subnet_group_name = aws_db_subnet_group.rds-subnet-group.id
  identifier           = "mysql-large-restricted-kms-${var.environment}"
  name                 = var.environment
  username             = "foo"
  password             = random_string.password.result
  parameter_group_name = aws_db_parameter_group.logs_enabled_mysql_default.name
  skip_final_snapshot  = true
  storage_encrypted    = true
  kms_key_id           = var.restricted_rds_kms_key
  publicly_accessible  = true

}

resource "aws_db_instance" "mysql" {
  allocated_storage    = 10
  engine               = "mysql"
  engine_version       = "8.0.28"
  instance_class       = "db.t3.micro"
  identifier           = "mysql-${var.customer}"
  username             = "root"
  password             = "foobarbaz"
  parameter_group_name = "default.mysql8.0"
  skip_final_snapshot  = true
}

resource "aws_db_instance" "postgres" {
  allocated_storage    = 10
  engine               = "postgres"
  engine_version       = "12.11"
  instance_class       = "db.t3.micro"
  identifier           = "postgres-${var.customer}"
  username             = "root"
  password             = "foobarbaz"
  parameter_group_name = "default.postgres12"
  skip_final_snapshot  = true
}

resource "aws_rds_cluster" "postgresql" {
  cluster_identifier      = "aurora-cluster-${var.customer}"
  engine                  = "aurora-postgresql"
  availability_zones      = ["us-east-1a", "us-east-1b", "us-east-1d"]
  database_name           = "mydb"
  master_username         = "foo"
  master_password         = "barbarbar"
  backup_retention_period = 1
  preferred_backup_window = "07:00-09:00"
}